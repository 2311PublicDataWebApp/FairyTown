<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- ReviewMapper 인터페이스와 연결된 XML 매퍼 -->
  <mapper namespace="ReviewMapper">
  
	<!-- ReviewVO 객체를 매핑하기 위한 resultMap -->
	<resultMap id="reviewResultMap" type="ReviewVO">
	    <!-- 리뷰 번호 -->
	    <result property="reviewNo" column="REVIEW_NO"/>
	    
	    <!-- 사용자 ID -->
	    <result property="userId" column="USER_ID"/>
	    
	    <!-- 사용자 실명 -->
	    <result property="realName" column="REAL_NAME"/>
	    
	    <!-- 티켓 유형 -->
	    <result property="ticketType" column="TICKET_TYPE"/>
	    
	    <!-- 리뷰 제목 -->
	    <result property="reviewTitle" column="REVIEW_TITLE"/>
	    
	    <!-- 리뷰 내용 -->
	    <result property="reviewContent" column="REVIEW_CONTENT"/>
	    
	    <!-- 리뷰 작성일 -->
	    <result property="reviewDate" column="REVIEW_DATE"/>
	    
	    <!-- 리뷰 수정일 -->
	    <result property="updateDate" column="UPDATE_DATE"/>
	    
	    <!-- 유용해요 수 -->
	    <result property="likeCount" column="LIKE_COUNT"/>
	    
	    <!-- 조회수 -->
	    <result property="viewCount" column="VIEW_COUNT"/>
	    
	  <!-- 이미지 리스트 -->
      <collection property="images" ofType="ReviewImageVO" column="REVIEW_NO" javaType="java.util.List" select="selectReviewImageList"/> 
	</resultMap>
	
	<!-- ReviewImageVO 객체를 매핑하기 위한 resultMap -->
	<resultMap type="ReviewImageVO" id="reviewImageResultMap">
		<id property="imageNo" column="IMAGE_NO"/>
		<result property="reviewNo" column="REVIEW_NO"/>
		<result property="fileName" column="FILE_NAME"/>
		<result property="fileRename" column="FILE_RENAME"/>
		<result property="filePath" column="FILE_PATH"/>
		<result property="fileSize" column="FILE_SIZE"/>
		<result property="fileType" column="FILE_TYPE"/>
		<result property="updateDate" column="UPDATE_DATE"/>
		<result property="thumbnailPath" column="THUMBNAIL_PATH"/>
	</resultMap>
  
  
  <select id="selectImagesByReviewNo" resultMap="reviewResultMap">
    SELECT
        R.REVIEW_NO AS REVIEW_NO,
        R.USER_ID AS USER_ID,
        R.REAL_NAME AS REAL_NAME,
        R.TICKET_TYPE AS TICKET_TYPE,
        R.REVIEW_TITLE AS REVIEW_TITLE,
        R.REVIEW_CONTENT AS REVIEW_CONTENT,
        R.REVIEW_DATE AS REVIEW_DATE,
        R.UPDATE_DATE AS UPDATE_DATE,
        R.LIKE_COUNT AS LIKE_COUNT,
        R.VIEW_COUNT AS VIEW_COUNT,
        I.IMAGE_NO AS IMAGE_NO,
        I.REVIEW_NO AS REVIEW_NO,
        I.FILE_NAME AS FILE_NAME,
        I.FILE_PATH AS FILE_PATH,
        I.FILE_RENAME AS FILE_RENAME,
        I.FILE_SIZE AS FILE_SIZE,
        I.FILE_TYPE AS FILE_TYPE,
        I.UPLOAD_DATE AS UPLOAD_DATE,
        I.THUMBNAIL_PATH AS THUMBNAIL_PATH
    FROM
        REVIEW_TBL R
        LEFT JOIN REVIEW_IMAGE_TBL I ON R.REVIEW_NO = I.REVIEW_NO
    WHERE
        R.REVIEW_NO = #{reviewNo}
</select> 
  
  
  
  	<!-- 리뷰 등록 쿼리 -->
	<!-- 글 작성 후 작성한 글 상세보기로 리다이렉트 하기 위한 SQL 쿼리 -->
	<insert id="insertReview" parameterType="ReviewVO" useGeneratedKeys="true" keyProperty="reviewNo">
    <selectKey keyProperty="reviewNo" order="AFTER" resultType="int">
        SELECT SEQ_REVIEW_NO.CURRVAL FROM DUAL
    </selectKey>
    INSERT INTO REVIEW_TBL
	VALUES(SEQ_REVIEW_NO.NEXTVAL, #{userId }, #{realName}, #{ticketType }, #{reviewTitle }, #{reviewContent}
	 , DEFAULT, DEFAULT, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 이미지 등록 쿼리 -->
	<insert id="insertImage">
<!-- 	<insert id="insertImage" parameterType="ReviewImageVO" useGeneratedKeys="true" keyProperty="ImageNo">
 --><!--     <selectKey keyProperty="ImageNo" order="AFTER" resultType="int">
        SELECT SEQ_IMAGE_NO.CURRVAL FROM DUAL
    </selectKey> -->
    INSERT INTO REVIEW_IMAGE_TBL
	VALUES(SEQ_IMAGE_NO.NEXTVAL, SEQ_REVIEW_NO.CURRVAL, #{fileName}, #{fileRename }, #{filePath }, #{fileSize}
	 , #{fileType}, DEFAULT, #{thumbnailPath} )
	</insert>
	
	<!-- 리뷰 삭제 쿼리 -->
	<delete id="deleteReview">
		DELETE FROM REVIEW_TBL
		WHERE REVIEW_NO = #{reviewNo }
	</delete>
	
	<!-- 리뷰 번호에 해당하는 리뷰를 조회-->
	<select id="selectByReviewNo" resultMap="reviewResultMap">
		SELECT * FROM REVIEW_TBL WHERE REVIEW_NO = #{reviewNo }
	</select>
	
	<!-- 가장 조회수가 높은 하나의 게시물을 조회 -->
	<select id="selectBestReview" resultMap="reviewResultMap">
    SELECT * FROM (
    SELECT * FROM REVIEW_TBL ORDER BY view_count DESC
	) WHERE ROWNUM = 1;
	</select>
  
  
 	<!-- 리뷰 조회수 업데이트 쿼리 -->
	<update id="updateViewCount" parameterType="int">
	    <!-- 주어진 리뷰 번호에 해당하는 리뷰의 조회수를 1 증가시킨다. -->
	    UPDATE REVIEW_TBL
	    SET VIEW_COUNT = VIEW_COUNT + 1
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
	
	<!-- 리뷰 좋아요 수 증가 쿼리 -->
	<update id="increaseLikeCount" parameterType="int">
	    UPDATE REVIEW_TBL
	    SET LIKE_COUNT = LIKE_COUNT + 1
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
	
	<!-- 리뷰 좋아요 수 감소 쿼리 -->
	<update id="decreaseLikeCount" parameterType="int">
	    UPDATE REVIEW_TBL
	    SET LIKE_COUNT = LIKE_COUNT - 1
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
	
  	<!-- 리뷰 좋아요 수 업데이트 쿼리 old -->
	<update id="updateLikeCountByAction" parameterType="int">
	    <!-- 주어진 리뷰 번호에 해당하는 리뷰의 좋아요 수를 1 증가시킵니다. -->
	    UPDATE REVIEW_TBL
	    SET LIKE_COUNT = LIKE_COUNT + 1
	    WHERE REVIEW_NO = #{reviewNo}
	</update>
	
	<!-- 리뷰 좋아요 수 업데이트 쿼리 -->
<!-- 	<update id="updateLikeCountByMap" parameterType="map">
	    <choose>
	        <when test="action == 'increase'">
	            UPDATE REVIEW_TBL SET LIKE_COUNT = LIKE_COUNT + 1 WHERE REVIEW_NO = #{reviewNo}
	        </when>
	        <otherwise>
	            UPDATE REVIEW_TBL SET LIKE_COUNT = LIKE_COUNT - 1 WHERE REVIEW_NO = #{reviewNo}
	        </otherwise>
	    </choose>
	</update> -->
  
	
	<!-- 총 리뷰 개수를 조회하는 SQL 쿼리 -->
	<select id="selectTotalCount" resultType="_int">
		SELECT COUNT(*) FROM REVIEW_TBL
	</select>
	
	<!-- 리뷰 리스트를 조회하는 SQL 쿼리 -->
	<select id="selectReviewList" resultMap="reviewResultMap">
		SELECT * FROM REVIEW_TBL ORDER BY REVIEW_NO DESC
	</select>
	<!-- 리뷰 번호에 해당하는 이미지를 조회 --><!-- 리뷰 번호에 해당하는 이미지를 조회 -->
	<!-- 리뷰 번호에 해당하는 이미지를 조회 --><!-- 리뷰 번호에 해당하는 이미지를 조회 -->
	<select id="selectReviewImageList" resultMap="reviewImageResultMap">
		SELECT * FROM REVIEW_IMAGE_TBL WHERE REVIEW_NO = #{reviewNo}
	</select>	
	
	<!-- 검색 조건에 따라 공지사항의 총 개수를 조회하는 SQL 쿼리 -->
	<select id="searchTotalCount" resultType="_int">
		SELECT COUNT(*) FROM REVIEW_TBL
		<if test="searchCondition =='all'">		
<!-- 			WHERE USER_ID LIKE '%'||#{searchKeyword}||'%'
 -->		WHERE REVIEW_TITLE LIKE '%'||#{searchKeyword}||'%'
			OR REVIEW_CONTENT LIKE '%'||#{searchKeyword}||'%'
			OR TICKET_TYPE LIKE '%'||#{searchKeyword}||'%'
		</if>
		<if test="searchCondition == 'title'">		
			WHERE REVIEW_TITLE LIKE '%'||#{searchKeyword}||'%'
		</if>
		<if test="searchCondition == 'content'">	
			WHERE REVIEW_CONTENT LIKE '%'||#{searchKeyword}||'%'
		</if>
 		<if test="searchCondition == 'tickettype'">		
			WHERE TICKET_TYPE LIKE '%'||#{searchKeyword}||'%'
		</if> 
	</select>
	
	<!-- 특정 키워드에 따라 공지사항을 조회하는 SQL 쿼리 -->
	<select id="selectReviewsByKeyword" resultMap="reviewResultMap">
		SELECT * FROM REVIEW_TBL
		<if test="searchCondition =='all'">		
 			WHERE REVIEW_TITLE LIKE '%'||#{searchKeyword}||'%'
 			OR REVIEW_CONTENT LIKE '%'||#{searchKeyword}||'%'
			OR TICKET_TYPE LIKE '%'||#{searchKeyword}||'%'
		</if>
		<if test="searchCondition == 'title'">		
			WHERE REVIEW_TITLE LIKE '%'||#{searchKeyword}||'%'
		</if>
		<if test="searchCondition == 'content'">	
			WHERE REVIEW_CONTENT LIKE '%'||#{searchKeyword}||'%'
		</if> 
 		<if test="searchCondition == 'tickettype'">		
			WHERE TICKET_TYPE LIKE '%'||#{searchKeyword}||'%'
		</if>
		ORDER BY REVIEW_NO DESC
	</select>	
	
		
	  
  
  
  </mapper>